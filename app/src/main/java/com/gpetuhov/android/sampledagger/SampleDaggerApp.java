package com.gpetuhov.android.sampledagger;

import android.app.Application;

import com.gpetuhov.android.sampledagger.dagger.components.AppComponent;
import com.gpetuhov.android.sampledagger.dagger.components.DaggerAppComponent;
import com.gpetuhov.android.sampledagger.dagger.components.SecondComponent;
import com.gpetuhov.android.sampledagger.dagger.modules.AppModule;
import com.gpetuhov.android.sampledagger.dagger.modules.SecondModule;

// Application class controls lifecycle of Dagger components
public class SampleDaggerApp extends Application {

    private static AppComponent appComponent;
    private static SecondComponent secondComponent;

    @Override
    public void onCreate() {
        super.onCreate();

        // Build and keep AppComponent instance.
        // DaggerAppComponent is generated by Dagger.
        // AppComponent instance will exist throughout all application lifecycle,
        // since it is used in both activities.
        appComponent = DaggerAppComponent.builder()
                .appModule(new AppModule(this))
                .build();
    }

    public static AppComponent getAppComponent() {
        return appComponent;
    }

    // Creates new SecondComponent instance
    public static SecondComponent getSecondComponent() {
        // Create new SecondComponent instance, only if not exist
        if (null == secondComponent) {
            // SecondComponent instance is created by AppComponent
            secondComponent = appComponent.plusSecondComponent(new SecondModule());
        }
        return secondComponent;
    }

    // Clears SecondComponent instance
    public static void clearSecondComponent() {
        // This will mark SecondComponent and all instances
        // provided by SecondModule for garbage collection.
        secondComponent = null;
    }

    // SecondComponent lifecycle is controlled MANUALLY
    // by calling getSecondComponent() and clearSecondComponent().
}
